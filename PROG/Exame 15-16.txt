1)
a)
bool removeAmount(float amount, vector<float>& coins);

b)
vector<float> Purse::possibleCoins = { 2, 1, 0.5, 0.2, 0.1 };
Colocaria depois da definição da classe e fora do main(), junto com as definiçoes
dos restantes membros da classe (global scope)
Static significa que a variável não muda de objeto para objeto, é uma variável da classe.
Isto quer dizer que mudando esta variável ela vai ser mudada para todos os objetos e é
acedida com Purse::possibleCoins

c)
Purse::Purse(string owner) {
	this->owner = owner;
	amount = 0;
}

d)
void Purse::addCoins(vector<float> coins) {
	for (size_t i = 0; i < coins.size(); ++i) {
		this->coins.push_back(coins[i]);
		amount += coins[i];
	}
}

e)
bool Purse::removeCoin(float coin) {
	for (size_t i = 0; i < coins.size(); ++i) {
		if (coin == coins[i]) {
			coins.erase(coins.begin() + i);
			amount -= coin;
			return true;
		}
	}
	return false;
}

f)
bool operator==(const Purse& p1, const Purse& p2) {
	if (p1.tellAmount() != p2.tellAmount()) return false;
	vector<float> v1 = p1.tellCoins(), v2 = p2.tellCoins();
	if (v1.size() != v2.size()) return false;
	sort(v1.begin(), v1.end());
	sort(v2.begin(), v2.end());
	for (size_t i = 0; i < v1.size(); ++i) {	// pode-se fazer v1 != v2
		if (v1.at(i) != v2.at(i)) return false;
	}
	return true;
}

e)
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
using namespace std;

class Purse
{
public:
	Purse(); // cria um porta moedas vazio sem dono especificado
	Purse(string owner); // cria um porta moedas vazio cujo dono é "owner"
	void addCoin(float coin); // acrescenta a moeda indicada como parâmetro
	void addCoins(vector<float> coins); // acrescenta as moedas indicadas como parâmetro
	bool removeCoin(float coin); //se existir uma moeda com o valor indicado como parâmetro
	bool removeAmount(float amount, vector<float>& coins);
								//remove‐a e retorna true, se não retorna false
		//... removeAmount(...) ...; // VER DESCRIÇÃO NA ALÍNEA a)
	float tellAmount() const; // retorna o montante total
	vector<float> tellCoins() const; // retorna uma cópia do vetor das moedas
	void show() const; // mostra o dono, as moedas e o montante total
	// ... outros métodos
	static vector<float> possibleCoins; // moedas possíveis: 2, 1, 0.5, 0.2 e 0.1 euro
private:
	string owner; // o dono do porta‐moedas
	vector<float> coins; // as moedas
	float amount; // o montante total (soma do valor das moedas)
};

vector<float> Purse::possibleCoins = { 2, 1, 0.5, 0.2, 0.1 };

Purse::Purse() {
	amount = 0;
}

void Purse::addCoin(float coin) {
	coins.push_back(coin);
	amount += coin;
}

float Purse::tellAmount() const {
	return amount;
}

void Purse::show() const {
	cout << "Dono: " << owner << endl;
	cout << "Moedas: ";
	for (const auto& x : coins) {
		cout << x << " ";
	}
	cout << endl << "Total: " << amount << endl;
}

Purse::Purse(string owner) {
	this->owner = owner;
	amount = 0;
}

void Purse::addCoins(vector<float> coins) {
	for (size_t i = 0; i < coins.size(); ++i) {
		this->coins.push_back(coins[i]);
		amount += coins[i];
	}
}

bool Purse::removeCoin(float coin) {
	for (size_t i = 0; i < coins.size(); ++i) {
		if (coin == coins[i]) {
			coins.erase(coins.begin() + i);
			amount -= coin;
			return true;
		}
	}
	return false;
}

vector<float> Purse::tellCoins() const {
	return coins;
}

bool operator==(const Purse& p1, const Purse& p2) {
	if (p1.tellAmount() != p2.tellAmount()) return false;
	vector<float> v1 = p1.tellCoins(), v2 = p2.tellCoins();
	if (v1.size() != v2.size()) return false;
	sort(v1.begin(), v1.end());
	sort(v2.begin(), v2.end());
	for (size_t i = 0; i < v1.size(); ++i) {	// pode-se fazer v1 != v2
		if (v1.at(i) != v2.at(i)) return false;
	}
	return true;
}

int main()
{
	srand(time(NULL));
	Purse ana("Ana");
	vector<float> coins = { 2, 1, 0.5, 0.2, 0.2, 0.1 };
	ana.addCoins(coins);
	ana.show();
	cout << endl;
	Purse empty;
	for (int i = 0; i < coins.size(); ++i) {
		size_t index = rand() % Purse::possibleCoins.size();
		empty.addCoin(Purse::possibleCoins.at(index));
	}
	empty.show();
	cout << endl;
	if (ana == empty) cout << "Os porta-moedas sao iguais" << endl;
	else cout << "Os porta-moedas nao sao iguais" << endl;
	return 0;
}

h)
Escolheria o multiset, visto que dá jeito em alguns métodos ter as moedas ordenadas. Escolho
o multiset em vez do set para haver possibilidade de moedas repetidas
multiset<float> coins;

void Purse::addCoin(float coin){
	coins.insert(coin);
	amount += coin;
}

2)
a)

class Board {
public:
	Board(size_t nCol, size_t nLin, char empty);
	int getNumCols() const;
	int getNumLines() const;
	char getCell(size_t line, size_t col) const;
	vector<char> getLine(size_t line) const;
	vector<char> getCol(size_t col) const;
	bool changeCell(size_t line, size_t col, char symbol);
	void show() const;
private:
	size_t nCol, nLin;
	vector<vector<char>> board;
	char empty;
};

b)
Board::Board(size_t nCol, size_t nLin, char empty) {
	for (int i = 0; i < nLin; ++i) {
		vector<char> line;
		for (int i = 0; i < nCol; ++i) {
			line.push_back(empty);
		}
		board.push_back(line);
	}
	this->empty = empty;
	this->nCol = nCol;
	this->nLin = nLin;
}

c)
string Board::getCol(size_t col) const {
	string column;
	for (size_t i = 0; i < nLin; ++i) {
		column += board.at(i).at(col - 1);
	}
	return column;
}

d)
bool testSequence(Board b, size_t col, char symbol, int n) {
	string column = b.getCol(col);
	int count = 0;
	for (size_t i = 0; i < column.size(); ++i) {
		if (column.at(i) == symbol) ++count;
		else count = 0;
		if (count == n) return true;
	}
	return false;
}


// PARA TESTAR

#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
using namespace std;

class Board {
public:
	Board(size_t nCol, size_t nLin, char empty);
	size_t getNumCols() const;
	size_t getNumLines() const;
	char getCell(size_t line, size_t col) const;
	string getLine(size_t line) const;
	string getCol(size_t col) const;
	bool changeCell(size_t line, size_t col, char symbol);
	void show() const;
private:
	size_t nCol, nLin;
	vector<vector<char>> board;
	char empty;
};

Board::Board(size_t nCol, size_t nLin, char empty) {
	for (int i = 0; i < nLin; ++i) {
		vector<char> line;
		for (int i = 0; i < nCol; ++i) {
			line.push_back(empty);
		}
		board.push_back(line);
	}
	this->empty = empty;
	this->nCol = nCol;
	this->nLin = nLin;
}

size_t Board::getNumCols() const {
	return nCol;
}

size_t Board::getNumLines() const {
	return nLin;
}

char Board::getCell(size_t line, size_t col) const {
	return board.at(line - 1).at(col - 1);
}

string Board::getLine(size_t line) const {
	string sline;
	vector<char> v = board.at(line - 1);
	for (const auto& x : v) sline += x;
	return sline;
}

string Board::getCol(size_t col) const {
	string column;
	for (size_t i = 0; i < nLin; ++i) {
		column += board.at(i).at(col - 1);
	}
	return column;
}

bool Board::changeCell(size_t line, size_t col, char symbol) { // incompleto, nao sei em que circunstancia nao e possivel
	board.at(line - 1).at(col - 1) = symbol;
	return true;
}

void Board::show() const {
	cout << endl;
	for (const auto& x : board) {
		for (const auto& y : x) {
			cout << y << " ";
		}
		cout << endl;
	}
	cout << endl;
}

bool testSequence(Board b, size_t col, char symbol, int n) {
	string column = b.getCol(col);
	int count = 0;
	for (size_t i = 0; i < column.size(); ++i) {
		if (column.at(i) == symbol) ++count;
		else count = 0;
		if (count == n) return true;
	}
	return false;
}

int main()
{
	Board b(5, 5, '.');
	b.changeCell(1, 1, 'x');
	b.changeCell(2, 1, 'x');
	b.changeCell(3, 1, 'x');
	b.changeCell(4, 1, 'y');
	cout << testSequence(b, 1, 'x', 3) << endl;
	cout << testSequence(b, 1, 'y', 2) << endl;
	cout << testSequence(b, 2, 'x', 3) << endl;
	cout << testSequence(b, 1, 'x', 1) << endl;
	return 0;
}

3)
a)
1-2
b)
Point();
Point(int x, int y);
Point& setX(int x);
Point& setY(int y);

c)

#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
using namespace std;

template<class T, class U>
class Point {
public:
	Point(T x, U y);
	T getX() const;
	U getY() const;
private:
	T x;
	U y;
};

template<class T, class U>
Point<T, U>::Point(T x, U y) {
	this->x = x;
	this->y = y;
}

template<class T, class U>
T Point<T, U>::getX() const {
	return x;
}

template<class T, class U>
U Point<T, U>::getY() const {
	return y;
}

int main()
{
	Point<char, int> p1('A', 3);
	cout << p1.getX() << " " << p1.getY() << endl;
	return 0;
}

d)
É possível, visto que os vectors desfrutam de random access iterators, pelo que também é possível
usa-los para funçoes que usam bidirectional iterators (o que a funçao exige)
reverse(vec.begin(), vec.end());

e)
É possível, mas vamos encontrar o "slicing problem". Ao guardamos o objeto Bird/Fish numa variável do tipo
Animal vamos perder informação, ou seja, os atributos que apenas pertencem a Bird/Fish