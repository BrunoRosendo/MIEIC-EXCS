1- i) interrupts
ii) dma
iii) dma
iv) polling (interrupts and dma use the bus)
v) interrupts

2- i) device-independent software
ii) hardware
iii) device driver
iv) device-independent software (da uma interface comum para todos os dispositivos I/O e tambem trata de facilitar o acesso)
v) user process

3-
ii)  The major number identifies the driver associated with the device. 
For example, /dev/null and /dev/zero are both managed by driver 1, whereas virtual consoles and serial terminals 
are managed by driver 4; similarly, both vcs1 and vcsa1 devices are managed by driver 7.
The kernel uses the major number at open time to dispatch execution to the appropriate driver.

The minor number is used only by the driver specified by the major number;
other parts of the kernel donâ€™t use it, and merely pass it along to the driver.
It is common for a driver to control several devices (as shown in the listing);
the minor number provides a way for the driver to differentiate among them.

5- i) c, system boot time in seconds
ii) a, time of day in ticks
iii) b, time of day in seconds plus number of ticks in current second, which is converted to nanoseconds
Linux uses epoch

6-
i) As a process is started, the scheduler initializes the quantum counter inclock ticks for the process.
The clock driver decrements the quantum counter by 1, at every clock interrupt. When the counter gets to zero ,
clock driver calls the scheduler to set up another process. Thus clock driver helps in preventing processes from
running longer than time slice allowed.

ii) The clock also accounts for the CPU time the processes use. The most accurate way to do this is to start a second
timer, distinct from the main system timer, whenever a process is started. When that process is stopped, the timer
can be read out to tell how long the process has run

8- i) 512 bytes
ii) Probably not, since the number of cylinders, tracks, sectors and heads can always be different, which means it's
hardware dependent (?).

9- i) Faster acccess times and more energy efficient
ii) less storage, more expensive
iii) In an nand flash storage, the data is written in pages but erased in blocks. Meaning that, to replace a file, we
have to copy the whole block somewhere, erase the old block and fill it again with the correct information.
To append to the file, however, we just have to write in the next page.
iv) The write blocks can always be buffered and queued, being stored later. Read blocks can't be prepared beforehand,
the ssd always has to search for the blocks and return the data, sequentially
